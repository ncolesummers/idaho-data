name: Sync Issues to Project Board

on:
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all open issues to project board'
        required: false
        default: 'true'
        type: boolean
      issue_numbers:
        description: 'Comma-separated list of issue numbers to sync (leave empty to sync all)'
        required: false
        type: string

jobs:
  sync-issues:
    name: Sync Issues to Project
    runs-on: ubuntu-latest
    permissions:
      issues: read
      repository-projects: write
      contents: read
    steps:
      - name: Sync issues to project board
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectUrl = 'https://github.com/users/ncolesummers/projects/3';
            const projectId = 'PVT_kwHOAVwHTc4A8lgA'; // Idaho Government Data project
            
            // Get list of issues to sync
            let issuesToSync = [];
            
            if (context.payload.inputs.issue_numbers) {
              // Sync specific issues
              const issueNumbers = context.payload.inputs.issue_numbers.split(',').map(n => parseInt(n.trim()));
              for (const number of issueNumbers) {
                try {
                  const { data: issue } = await github.rest.issues.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: number
                  });
                  if (issue.state === 'open') {
                    issuesToSync.push(issue);
                  }
                } catch (error) {
                  console.log(`Could not fetch issue #${number}: ${error.message}`);
                }
              }
            } else {
              // Sync all open issues
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              issuesToSync = issues.filter(issue => !issue.pull_request);
            }
            
            console.log(`Found ${issuesToSync.length} issues to sync`);
            
            // Check which issues are already in the project
            const existingItemsQuery = `
              query($projectId: ID!, $cursor: String) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100, after: $cursor) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                          }
                        }
                      }
                      pageInfo {
                        hasNextPage
                        endCursor
                      }
                    }
                  }
                }
              }
            `;
            
            const existingIssueNumbers = new Set();
            let cursor = null;
            let hasNextPage = true;
            
            while (hasNextPage) {
              const result = await github.graphql(existingItemsQuery, {
                projectId: projectId,
                cursor: cursor
              });
              
              if (result.node && result.node.items) {
                for (const item of result.node.items.nodes) {
                  if (item.content && item.content.number) {
                    existingIssueNumbers.add(item.content.number);
                  }
                }
                hasNextPage = result.node.items.pageInfo.hasNextPage;
                cursor = result.node.items.pageInfo.endCursor;
              } else {
                hasNextPage = false;
              }
            }
            
            console.log(`Found ${existingIssueNumbers.size} issues already in project`);
            
            // Add missing issues to project
            const addToProjectMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(
                  input: {
                    projectId: $projectId,
                    contentId: $contentId
                  }
                ) {
                  item {
                    id
                  }
                }
              }
            `;
            
            let addedCount = 0;
            for (const issue of issuesToSync) {
              if (!existingIssueNumbers.has(issue.number)) {
                try {
                  await github.graphql(addToProjectMutation, {
                    projectId: projectId,
                    contentId: issue.node_id
                  });
                  console.log(`Added issue #${issue.number} to project`);
                  addedCount++;
                } catch (error) {
                  console.error(`Failed to add issue #${issue.number}: ${error.message}`);
                }
              }
            }
            
            console.log(`\nSummary:`);
            console.log(`- Total issues checked: ${issuesToSync.length}`);
            console.log(`- Already in project: ${issuesToSync.filter(i => existingIssueNumbers.has(i.number)).length}`);
            console.log(`- Newly added: ${addedCount}`);
            
            // Create summary for workflow
            await core.summary
              .addHeading('Issue Sync Summary')
              .addTable([
                [{data: 'Metric', header: true}, {data: 'Count', header: true}],
                ['Total issues checked', issuesToSync.length.toString()],
                ['Already in project', issuesToSync.filter(i => existingIssueNumbers.has(i.number)).length.toString()],
                ['Newly added', addedCount.toString()]
              ])
              .write();